// bunx prisma generate
// bunx prisma db push

// docker compose down
// docker compose up -d

// bun start

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  firstName            String
  lastName             String
  password             String
  admin                Boolean   @default(false)
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  deleteAccountToken   String?
  deleteAccountExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  photos               Photo[]   @relation("UserPhotos")
  comments             Comment[] @relation("UserComments")
}

model Photo {
  id           Int        @id @default(autoincrement())
  userId       Int
  url          String?    @unique
  binaryString String?
  source       SourceType
  description  String     @default("No description provided")
  likes        Int        @default(0)
  commentCount Int        @default(0)
  createdAt    DateTime   @default(now())
  aspectRatio  Float?
  size         Int?
  user         User       @relation("UserPhotos", fields: [userId], references: [id], onDelete: Cascade)
  comments     Comment[]
}

enum SourceType {
  GOOGLE_PHOTOS
  INSTAGRAM
  NOT_POSTED
}

model Comment {
  id        Int       @id @default(autoincrement())
  photoId   Int
  author    String
  content   String
  timestamp DateTime?
  photo     Photo     @relation(fields: [photoId], references: [id], onDelete: Cascade)
  userId    Int?      // optional just because there are old comments that are not associated with any user
  user      User?     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
}
